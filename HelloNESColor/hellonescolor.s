;
; File generated by cc65 v 2.16 - Git 4156538
;
	.fopt		compiler,"cc65 v 2.16 - Git 4156538"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_index
	.export		_NMI_flag
	.export		_frame_count
	.export		_text_pos
	.export		_test
	.export		_TEXT
	.export		_PALETTE
	.export		_attrib_table
	.export		_all_off
	.export		_all_on
	.export		_loadPalette
	.export		_resetScroll
	.export		_loadText
	.export		_main

.segment	"RODATA"

_TEXT:
	.byte	$48,$65,$6C,$6C,$6F,$20,$4E,$45,$53,$21,$00
_PALETTE:
	.byte	$23
	.byte	$00
	.byte	$00
	.byte	$11
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$15
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$1A
_attrib_table:
	.byte	$44
	.byte	$BB
	.byte	$44
	.byte	$BB

.segment	"BSS"

.segment	"ZEROPAGE"
.segment	"BSS"
.segment	"ZEROPAGE"
_index:
	.res	1,$00
.segment	"ZEROPAGE"
_NMI_flag:
	.res	1,$00
.segment	"ZEROPAGE"
_frame_count:
	.res	1,$00
.segment	"ZEROPAGE"
_text_pos:
	.res	1,$00
.segment	"BSS"
_test:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ all_off (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_all_off: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ all_on (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_all_on: near

.segment	"CODE"

;
; PPU_CTRL = 0x90; //NMI On
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e; //Screen on
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < sizeof(PALETTE); ++index) {
;
	sta     _index
L00BC:	lda     _index
	cmp     #$10
	bcs     L00BD
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for(index = 0; index < sizeof(PALETTE); ++index) {
;
	inc     _index
	jmp     L00BC
;
; PPU_ADDRESS = 0x23;
;
L00BD:	lda     #$23
	sta     $2006
;
; PPU_ADDRESS = 0xda;
;
	lda     #$DA
	sta     $2006
;
; for(index = 0; index < sizeof(attrib_table); ++index) {
;
	lda     #$00
	sta     _index
L00BE:	lda     _index
	cmp     #$04
	bcs     L0042
;
; PPU_DATA = attrib_table[index];
;
	ldy     _index
	lda     _attrib_table,y
	sta     $2007
;
; for(index = 0; index < sizeof(attrib_table); ++index) {
;
	inc     _index
	jmp     L00BE
;
; }
;
L0042:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadText: near

.segment	"CODE"

;
; if(text_pos < sizeof(TEXT)) {
;
	lda     _text_pos
	cmp     #$0B
	bcs     L00BF
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca + text_pos; //Roughly center
;
	lda     _text_pos
	clc
	adc     #$CA
	sta     $2006
;
; PPU_DATA = TEXT[text_pos];
;
	ldy     _text_pos
	lda     _TEXT,y
	sta     $2007
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xea + text_pos; //One line down
;
	lda     _text_pos
	clc
	adc     #$EA
	sta     $2006
;
; PPU_DATA = TEXT[text_pos];
;
	ldy     _text_pos
	lda     _TEXT,y
	sta     $2007
;
; ++text_pos;
;
	inc     _text_pos
;
; } else {
;
	rts
;
; text_pos = 0;
;
L00BF:	lda     #$00
	sta     _text_pos
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xca;
;
	lda     #$CA
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index) {
;
	lda     #$00
	sta     _index
L00C0:	lda     _index
	cmp     #$0B
	bcs     L00C1
;
; PPU_DATA = 0; //Clear the text by writing tile 0 (blank) in it's place
;
	lda     #$00
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index) {
;
	inc     _index
	jmp     L00C0
;
; PPU_ADDRESS = 0x21;
;
L00C1:	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xea;
;
	lda     #$EA
	sta     $2006
;
; for(index = 0; index < sizeof(TEXT); ++index) {
;
	lda     #$00
	sta     _index
L00C2:	lda     _index
	cmp     #$0B
	bcs     L00B1
;
; PPU_DATA = 0; //Clear the text by writing tile 0 (blank) in it's place
;
	lda     #$00
	sta     $2007
;
; for(index = 0; index < sizeof(TEXT); ++index) {
;
	inc     _index
	jmp     L00C2
;
; }
;
L00B1:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; all_off();
;
	jsr     _all_off
;
; loadPalette();
;
	jsr     _loadPalette
;
; resetScroll();
;
	jsr     _resetScroll
;
; all_on();
;
	jsr     _all_on
;
; while(NMI_flag == 0); //NMI_flag is set in reset.s
;
L00C3:	lda     _NMI_flag
	beq     L00C3
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; if(TEXT[text_pos] == ' ') frame_count = 15;
;
	ldy     _text_pos
	lda     _TEXT,y
	cmp     #$20
	bne     L00C4
	lda     #$0F
	sta     _frame_count
;
; if(frame_count == 15) {
;
L00C4:	lda     _frame_count
	cmp     #$0F
	bne     L00C3
;
; loadText();
;
	jsr     _loadText
;
; resetScroll();
;
	jsr     _resetScroll
;
; frame_count = 0;
;
	lda     #$00
	sta     _frame_count
;
; ++test;
;
	inc     _test
;
; while(1) {
;
	jmp     L00C3

.endproc

